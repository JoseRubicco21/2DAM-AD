package models;

import java.io.Serializable;

public class Equipo implements Comparable<Equipo>, Serializable {
    private String nombre;
    private int victorias;
    private int derrotas;
    private int puntosAFavor;
    private int puntosEnContra;

    public Equipo(String nombre) {
        this.nombre = nombre;
    }

    
    public Equipo(String nombre, int victorias, int derrotas, int puntosAFavor, int puntosEnContra) {
        this.nombre = nombre;
        this.victorias = victorias;
        this.derrotas = derrotas;
        this.puntosAFavor = puntosAFavor;
        this.puntosEnContra = puntosEnContra;
    }


    public String getNombre() {
        return nombre;
    }
    public void setNombre(String nombre) {
        this.nombre = nombre;
    }
   
    public int getVictorias() {
        return victorias;
    }
    public void setVictorias(int victorias) {
        this.victorias = victorias;
    }
   
    public int getDerrotas() {
        return derrotas;
    }
    public void setDerrotas(int derrotas) {
        this.derrotas = derrotas;
    }
   
    public int getPuntosAFavor() {
        return puntosAFavor;
    }
    public void setPuntosAFavor(int puntosAFavor) {
        this.puntosAFavor = puntosAFavor;
    }

    public int getPuntosEnContra() {
        return puntosEnContra;
    }
    public void setPuntosEnContra(int puntosEnContra) {
        this.puntosEnContra = puntosEnContra;
    }

    public int getPuntos() {
        return this.victorias*2  + this.derrotas;
    }

    public int getPartidosJugados() {
        return this.victorias/2 + this.derrotas;
    }
    
    public int getDiferenciaDePuntos(){
        return this.puntosAFavor - this.puntosEnContra;
    }

    /*
     * Default compare to. I don't like this idea, I would prefer to create comparators so I can lend the power
     * of heritance. Anything that's an child of equipo would be able to use those comparators...
     */

    @Override
    public int compareTo(Equipo o) {
        if(this.getVictorias() > o.getVictorias()) return 1;
        if(this.getVictorias() == o.getVictorias()) {
            return compareByPuntosEncestados(o);
        }
        // We can simplify the condition as > and == are already taken care of the only other possibilty
        // is <. 
        return -1;
    }


    private int compareByPuntosEncestados(Equipo o){
        if(this.getPuntosAFavor() > o.getPuntosAFavor()) return 1;
        if(this.getPuntosAFavor() == o.getPuntosAFavor()) return 0;
        return -1;
    }


    

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((nombre == null) ? 0 : nombre.hashCode());
        result = prime * result + victorias;
        result = prime * result + derrotas;
        result = prime * result + puntosAFavor;
        result = prime * result + puntosEnContra;
        return result;
    }

    //This code was literally generated by java. No multiple returns is only a problem when missused.
    // I'm not single returning stuff generated by SOURCE ACTIONS. As java LSP is in fact smarter than me.
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Equipo other = (Equipo) obj;
        if (nombre == null) {
            if (other.nombre != null)
                return false;
        } else if (!nombre.equals(other.nombre)) return false;
        return true;
    }

    

}
